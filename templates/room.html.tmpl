<!DOCTYPE html>
<html>
  <head>
    <title>{{.Title}}</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #f4f4f4;
      }
      .container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background: white;
        padding: 20px;
        width: 320px; /* 固定幅 */
        max-width: 100%; /* 小さい画面での調整 */
        border-radius: 10px;
      }
      h1 {
        color: #333;
      }
      p {
        color: #666;
      }
      img {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        object-fit: cover;
      }

      .chat-container {
        width: 100%;
        margin-top: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }

      /* チャットのテキストエリア */
      .chat-textarea {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
        resize: none; /* ユーザーがサイズ変更できないようにする */
        height: 50px;
      }

      /* 送信ボタン */
      .send-button {
        padding: 5px 10px;
        margin-left: 5px;
        font-size: 16px;
        color: #fff;
        background-color: #2196f3; /* Slackのテーマカラーに近い青 */
        border: none;
        border-radius: 4px;
        cursor: pointer;
        text-align: center;
      }

      .send-button:hover {
        background-color: #1976d2; /* マウスオーバー時の色 */
      }

      /* フォーカス時のテキストエリアとボタン */
      .send-button:focus {
        outline: none;
        box-shadow: 0 0 4px rgba(33, 150, 243, 0.5);
      }

      .send-button.disabled {
        background-color: #ccc;
        cursor: not-allowed;
        pointer-events: none;
      }

      .latest-comment-container {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        margin-top: 10px;
        color: #666;
        font-size: 14px;
      }

      #serverMessage {
        display: inline-block;
        font-size: 12px;
        color: #333;
        margin-top: 5px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h3>部屋名: {{.RoomName}}</h3>
      <img src="{{.Picture}}" alt="{{.Email}}">
      <div class="chat-container">
        <textarea class="chat-textarea" placeholder="チャット..." oninput="toggleIconState()"></textarea>
        <button class="send-button disabled" onclick="sendMessage()"><i class="fas fa-paper-plane"></i></button>
      </div>
      <div class="latest-comment-container">
        直前のコメント
        <span id="serverMessage">まだ何も投稿してないよ</span>
      </div>
    </div>

    <script>
      var socket;
      let reconnectInterval = 5000;

      function toggleIconState() {
        const textarea = document.querySelector(".chat-textarea");
        const icon = document.querySelector(".send-button");
        if (textarea.value.trim() === "") {
          icon.classList.add("disabled");
          icon.onclick = null;
        } else {
          icon.classList.remove("disabled");
          icon.onclick = sendMessage;
        }
      }

      function connectWebSocket(roomName) {
        wsScheme = window.location.protocol === "https:" ? "wss://" : "ws://";
        wsUrl = wsScheme + window.location.host + "/ws/" + roomName;
        socket = new WebSocket(wsUrl);

        socket.onopen = function(event) {
          console.log("WebSocket is open now.");
          const name = "{{.Name | js}}";
          socket.send(`${name}さんがチャットに参加しました！`);
        };

        socket.onmessage = function(event) {
          console.log("Message from server ", event.data);
          document.getElementById("serverMessage").innerText = event.data;
        };

        socket.onclose = function(event) {
          console.log("WebSocket is closed now.");
          setTimeout(connectWebSocket(roomName), reconnectInterval);
        };

        socket.onerror = function(error) {
          console.log("WebSocket error: ", error);
        };
      }

      function sendMessage() {
        if (socket && socket.readyState === WebSocket.OPEN) {
          const input = document.querySelector(".chat-textarea");
          socket.send(input.value);
          input.value = "";
          document.querySelector(".send-button").classList.add("disabled");
        } else {
          alert("チャットに接続できませんでした。\nリロードして再接続してください。");
        }
      }

      window.onload = function() {
        const roomName = "{{.RoomName | js}}";
        connectWebSocket(roomName);
      }
    </script>
  </body>
</html>
